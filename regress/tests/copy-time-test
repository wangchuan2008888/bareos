#!/bin/sh
#
# Run a simple backup then copy it
#   to another device.
#
# This script uses the virtual disk autochanger
#
TestName="copy-time-test"
JobName=CopyJobSave
. scripts/functions


scripts/cleanup
scripts/copy-migration-confs
scripts/prepare-disk-changer
sed 's/migrate/copy/g' ${cwd}/bin/bareos-dir.conf > ${cwd}/tmp/1
sed 's/Migrate/Copy/g' ${cwd}/tmp/1 > ${cwd}/bin/bareos-dir.conf
change_jobname NightlySave $JobName

# Directory to backup.
# This directory will be created by setup_data().
BackupDirectory="${tmp}/data"

# Use a tgz to setup data to be backuped.
# Data will be placed at "${tmp}/data/".
setup_data data/small.tgz


start_test

#
# Note, we first backup into Pool Default,
#          then Copy into Pool Full.
#              Pool Default uses Storage=File
#              Pool Full    uses Storage=DiskChanger

# Write out bconsole commands
cat <<END_OF_DATA >${cwd}/tmp/bconcmds
@$out /dev/null
messages
@$out ${cwd}/tmp/log1.out
label storage=File volume=FileVolume001 Pool=Default
label storage=File volume=FileVolume002 Pool=Special
label storage=DiskChanger volume=ChangerVolume001 slot=1 Pool=Full drive=0
label storage=DiskChanger volume=ChangerVolume002 slot=2 Pool=Full drive=0
list volumes
@# run three jobs
run job=$JobName Pool=Special level=Full yes
run job=$JobName level=Full yes
run job=$JobName level=Full yes
wait
messages
update volume=FileVolume001 VolStatus=Used
update volume=FileVolume002 VolStatus=Used
llist jobid=2,3
list jobs
list volumes
@#setdebug level=20 dir
@# should copy only jobid=2 and 3
run job=copy-time yes
run job=copy-time pool=Special yes
wait
messages
wait
list jobs
list volumes
purge volume=FileVolume001
purge volume=FileVolume002
@#
@# now do a restore
@#
@$out ${cwd}/tmp/log2.out
restore where=${cwd}/tmp/bareos-restores select storage=DiskChanger
unmark *
mark *
done
yes
wait
messages
quit
END_OF_DATA

run_bareos
check_for_zombie_jobs storage=File
stop_bareos

for i in 1 2 3; do
    get_mig_info $i ${cwd}/tmp/log1.out

    if [ "$i" -eq 1 -a -n "$RET" ]; then
        bstat=2
        print_debug "The first job should not have been copied"

    elif [ "$i" -ne 1 -a -z "$RET" ]; then
        bstat=2
        print_debug "Other job should have been copied"
    fi
done


check_two_logs
check_restore_diff
end_test
