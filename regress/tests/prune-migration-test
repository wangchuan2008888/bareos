#!/bin/sh
#
# Run a simple backup  then migrate it
#   to another device, then see how prune code handle that
#
# This script uses the virtual disk autochanger
#
TestName="prune-migration-test"
JobName=MigrationJobSave
. scripts/functions


scripts/cleanup
scripts/copy-migration-confs
scripts/prepare-disk-changer

# Directory to backup.
# This directory will be created by setup_data().
BackupDirectory="${tmp}/data"

# Use a tgz to setup data to be backuped.
# Data will be placed at "${tmp}/data/".
setup_data data/small.tgz

# the default fileset FS_TESTJOB backups all file and directories defined in "${tmp}/file-list".
echo "${BackupDirectory}" >${tmp}/file-list



change_jobname NightlySave $JobName
dircfg=$conf/bareos-dir.conf
$bperl -e "add_attribute('$dircfg', 'AutoPrune', 'No', 'Client')"
$bperl -e "add_attribute('$dircfg', 'Job Retention', '1s', 'Client')"

start_test

#
# Note, we first backup into Pool Default,
#          then Migrate into Pool Full.
#              Pool Default uses Storage=File
#              Pool Full    uses Storage=DiskChanger

# Write out bconsole commands
cat <<END_OF_DATA >${cwd}/tmp/bconcmds
@$out /dev/null
messages
@$out ${cwd}/tmp/log1.out
setdebug level=000 storage=File
label storage=File volume=FileVolume001 Pool=Default
label storage=DiskChanger volume=ChangerVolume001 slot=1 Pool=Full drive=0
label storage=DiskChanger volume=ChangerVolume002 slot=2 Pool=Full drive=0
@# run two jobs (both will be migrated)
run job=$JobName yes
@sleep 2
run job=$JobName yes
@sleep 2
wait
list jobs
@# should migrate two jobs
run job=migrate-job yes
wait
messages
list jobs
wait
@sleep 2
@#
@# Now do another backup, but level Incremental
@#
run job=$JobName level=Incremental yes
wait
messages
@sleep 2
@################################################################
@$out $cwd/tmp/log10.out
setdebug level=1 director
sql
SELECT JobId, JobTDate, StartTime, EndTime FROM Job;

list jobs
prune jobs jobtype=backup yes
@sleep 90
list jobs
sql
SELECT JobId, JobTDate, StartTime, EndTime FROM Job;

@################################################################
@# now do a restore
@#
@$out ${cwd}/tmp/log2.out
list volumes
restore where=${cwd}/tmp/bareos-restores select storage=DiskChanger
unmark *
mark *
done
yes
list volumes
wait
messages
quit
END_OF_DATA

run_bareos
check_for_zombie_jobs storage=File
stop_bareos

check_two_logs
check_restore_diff

# Now we will verify that the pruning code is working as expected.  Each time,
# we run 'list jobs', 'prune', 'list jobs'. check_prune_list ensures that jobids
# in argument are present in the first 'list jobs', the 'prune' command deletes
# them (same number), and checks that the last 'list jobs' doesn't contain them
# anymore. See scripts/functions.pm for details.

# M M g g F F I0 -> F
$bperl -e "check_prune_list('$tmp/log10.out',1,2,5,8)"
estat=$(($estat + $?))

end_test
