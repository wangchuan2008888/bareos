#!/bin/sh
#
# Run a simple backup but
#   split the archive into two volumes, then build a BSR with
#   the restore command and use bextract to restore the files.
#
TestName="bextract-test"
JobName="bextract"
. scripts/functions

scripts/cleanup
scripts/copy-test-confs
change_jobname NightlySave $JobName

# Directory to backup.
# This directory will be created by setup_data().
BackupDirectory="${tmp}/data"

# Use a tgz to setup data to be backuped.
# Data will be placed at "${tmp}/data/".
setup_data data/small.tgz


start_test

cat <<END_OF_DATA >${cwd}/tmp/bconcmds
@$out /dev/null
messages
@$out ${cwd}/tmp/log1.out
label storage=File1 volume=TestVolume001 pool=Default
label storage=File1 volume=TestVolume002 pool=Default
update Volume=TestVolume001 MaxVolBytes=10000
@#setdebug level=400 dir
setdebug level=400 storage=File1
run job=$JobName storage=File1 yes
wait
messages
@#
@# now build the bsr file but do not restore
@#
@$out ${tmp}/log2.out
restore bootstrap=${working}/restore.bsr where=${tmp}/bareos-restores select all storage=File1 done
no
wait
messages
quit
END_OF_DATA

run_bareos
check_for_zombie_jobs storage=File1
stop_bareos

mkdir -p ${cwd}/tmp/bareos-restores
if test "$debug" -eq 1 ; then
  $bin/bextract -v -c ${conf} -b ${working}/restore.bsr ${tmp} ${tmp}/bareos-restores
else
  $bin/bextract -c ${conf} -b ${working}/restore.bsr ${tmp} ${tmp}/bareos-restores 2>&1 >/dev/null
fi
rstat=$?
grep "^  Termination: *Backup OK" ${tmp}/log1.out 2>&1 >/dev/null
bstat=$?
check_restore_diff
end_test
