# BAREOS - Backup Archiving REcovery Open Sourced
#
# Copyright (C) 2013-2014 Bareos GmbH & Co. KG
#
# This program is Free Software; you can redistribute it and/or
# modify it under the terms of version three of the GNU Affero General Public
# License as published by the Free Software Foundation, which is
# listed in the file LICENSE.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# Author: Marco van Wieringen
#
from bareossd import *
from bareos_sd_consts import *

def load_bareos_plugin(context, plugindef):
  DebugMessage(context, 100, "load_bareos_plugin called with param: " + plugindef + "\n");
  events = [];
  events.append(bsdEventType['bsdEventJobStart']);
  events.append(bsdEventType['bsdEventJobEnd']);
  RegisterEvents(context, events);
  return bRCs['bRC_OK'];

def parse_plugin_definition(context, plugindef):
  DebugMessage(context, 100, "parse_plugin_definition called with param: " + plugindef + "\n");
  plugin_options = plugindef.split(":");
  for current_option in plugin_options:
    key,sep,val = current_option.partition("=");
    if val == '':
      continue;

    elif key == 'instance':
      continue;

    elif key == 'module_path':
      continue;

    elif key == 'module_name':
      continue;

    else:
      DebugMessage(context, 100, "parse_plugin_definition unknown option " + key + " with value " + val + "\n");
      return bRCs['bRC_Error'];

  return bRCs['bRC_OK'];

def handle_plugin_event(context, event):
  if event == bsdEventType['bsdEventJobStart']:
    DebugMessage(context, 100, "bsdEventJobStart event triggered\n");
    jobname = GetValue(context, bsdrVariable['bsdVarJobName']);
    DebugMessage(context, 100, "Job " + jobname + " starting\n");

  elif event == bsdEventType['bsdEventJobEnd']:
    DebugMessage(context, 100, "bsdEventJobEnd event triggered\n");
    jobname = GetValue(context, bsdrVariable['bsdVarJobName']);
    DebugMessage(context, 100, "Job " + jobname + " stopped\n");

  return bRCs['bRC_OK'];
