.. ATTENTION do not edit this file manually.
   It was automatically converted from the corresponding .tex file

.. _fdPlugins:

File Daemon Plugins
===================

File Daemon plugins are configured by the :strong:`Plugin` directive of a :ref:`File Set <directive-fileset-plugin>`.



.. warning::
   Currently the plugin command is being stored as part of the backup. The restore command in your directive should be flexible enough if things might change in future, otherwise you could run into trouble.

.. _bpipe:

bpipe Plugin
------------

:index:`[TAG=Plugin->bpipe] <pair: Plugin; bpipe>`

The bpipe plugin is a generic pipe program, that simply transmits the data from a specified program to Bareos for backup, and from Bareos to a specified program for restore. The purpose of the plugin is to provide an interface to any system program for backup and restore. That allows you, for example, to do database backups without a local dump. By using different command lines to bpipe, you can backup any kind of data (ASCII or binary) depending on the program called.

On Linux, the Bareos bpipe plugin is part of the **bareos-filedaemon** package and is therefore installed on any system running the filedaemon.

The bpipe plugin is so simple and flexible, you may call it the "Swiss Army Knife" of the current existing plugins for Bareos.

The bpipe plugin is specified in the Include section of your Jobâ€™s FileSet resource in your :file:`bareos-dir.conf`.

.. code-block:: sh
   :caption: bpipe fileset

   FileSet {
     Name = "MyFileSet"
     Include {
       Options {
         signature = MD5
         compression = gzip
       }
       Plugin = "bpipe:file=<filepath>:reader=<readprogram>:writer=<writeprogram>
     }
   }

The syntax and semantics of the Plugin directive require the first part of the string up to the colon to be the name of the plugin. Everything after the first colon is ignored by the File daemon but is passed to the plugin. Thus the plugin writer may define the meaning of the rest of the string as he wishes. The full syntax of the plugin directive as interpreted by the bpipe plugin is:

.. code-block:: sh
   :caption: bpipe directive

   Plugin = "<plugin>:file=<filepath>:reader=<readprogram>:writer=<writeprogram>"

plugin
   is the name of the plugin with the trailing -fd.so stripped off, so in this case, we would put bpipe in the field.

filepath
   specifies the namespace, which for bpipe is the pseudo path and filename under which the backup will be saved. This pseudo path and filename will be seen by the user in the restore file tree. For example, if the value is :strong:`/MySQL/mydump.sql`, the data backed up by the plugin will be put under that :emphasis:`pseudo` path and filename. You must be careful to choose a naming convention that is unique to avoid a conflict with a path and filename that actually
   exists on your system.

readprogram
   for the bpipe plugin specifies the "reader" program that is called by the plugin during backup to read the data. bpipe will call this program by doing a popen on it.

writeprogram
   for the bpipe plugin specifies the "writer" program that is called by the plugin during restore to write the data back to the filesystem.

Please note that the two items above describing the "reader" and "writer", these programs are "executed" by Bareos, which means there is no shell interpretation of any command line arguments you might use. If you want to use shell characters (redirection of input or output, ...), then we recommend that you put your command or commands in a shell script and execute the script. In addition if you backup a file with reader program, when running the writer program during the restore, Bareos will not
automatically create the path to the file. Either the path must exist, or you must explicitly do so with your command or in a shell script.

See the examples about :ref:`backup-postgresql` and :ref:`backup-mysql`.

PGSQL Plugin
------------

See chapter :ref:`backup-postgresql-plugin`.

MySQL Plugin
------------

See the chapters :ref:`backup-mysql-xtrabackup` and :ref:`backup-mysql-python`.

MSSQL Plugin
------------

See chapter :ref:`MSSQL`.

LDAP Plugin
-----------

:index:`[TAG=Plugin->ldap] <pair: Plugin; ldap>`

This plugin is intended to backup (and restore) the contents of a LDAP server. It uses normal LDAP operation for this. The package **bareos-filedaemon-ldap-python-plugin** (:index:`Version >= 15.2.0 <pair: bareos-15.2.0; LDAP Plugin>`) contains an example configuration file, that must be adapted to your envirnoment.

Cephfs Plugin
-------------

:index:`[TAG=Plugin->ceph->cephfs] <triple: Plugin; ceph; cephfs>` :index:`[TAG=Ceph->Cephfs Plugin] <pair: Ceph; Cephfs Plugin>`

Opposite to the :ref:`Rados Backend <SdBackendRados>` that is used to store data on a CEPH Object Store, this plugin is intended to backup a CEPH Object Store via the Cephfs interface to other media. The package **bareos-filedaemon-ceph-plugin** (:index:`Version >= 15.2.0 <pair: bareos-15.2.0; Cephfs Plugin>`) contains an example configuration file, that must be adapted to your envirnoment.

Rados Plugin
------------

:index:`[TAG=Plugin->ceph->rados] <triple: Plugin; ceph; rados>` :index:`[TAG=Ceph->Rados Plugin] <pair: Ceph; Rados Plugin>`

Opposite to the :ref:`Rados Backend <SdBackendRados>` that is used to store data on a CEPH Object Store, this plugin is intended to backup a CEPH Object Store via the Rados interface to other media. The package **bareos-filedaemon-ceph-plugin** (:index:`Version >= 15.2.0 <pair: bareos-15.2.0; CEPH Rados Plugin>`) contains an example configuration file, that must be adapted to your envirnoment.

GlusterFS Plugin
----------------

:index:`[TAG=Plugin->glusterfs] <pair: Plugin; glusterfs>` :index:`[TAG=GlusterFS->Plugin] <pair: GlusterFS; Plugin>`

Opposite to the :ref:`GFAPI Backend <SdBackendGfapi>` that is used to store data on a Gluster system, this plugin is intended to backup data from a Gluster system to other media. The package **bareos-filedaemon-glusterfs-plugin** (:index:`Version >= 15.2.0 <pair: bareos-15.2.0; GlusterFS Plugin>`) contains an example configuration file, that must be adapted to your envirnoment.

python-fd Plugin
----------------

:index:`[TAG=Plugin->Python->File Daemon] <triple: Plugin; Python; File Daemon>`

The **python-fd** plugin behaves similar to the :ref:`director-python-plugin`. Base plugins and an example get installed via the package bareos-filedaemon-python-plugin. Configuration is done in the :ref:`DirectorResourceFileSet` on the director.

We basically distinguish between command-plugin and option-plugins.

Command Plugins
~~~~~~~~~~~~~~~

Command plugins are used to replace or extend the FileSet definition in the File Section. If you have a command-plugin, you can use it like in this example:

.. code-block:: sh
   :caption: bareos-dir.conf: Python FD command plugins

   FileSet {
     Name = "mysql"
     Include {
       Options {
         Signature = MD5 # calculate md5 checksum per file
       }
       File = "/etc"
       Plugin = "python:module_path=/usr/lib/bareos/plugins:module_name=bareos-fd-mysql"
     }
   } 

:index:`[TAG=MySQL->Backup] <pair: MySQL; Backup>` This example uses the :ref:`MySQL plugin <backup-mysql-python>` to backup MySQL dumps in addition to :file:`/etc`.

Option Plugins
~~~~~~~~~~~~~~

Option plugins are activated in the Options resource of a FileSet definition.

Example:

.. code-block:: sh
   :caption: bareos-dir.conf: Python FD option plugins

   FileSet {
     Name = "option"
     Include {
       Options {
         Signature = MD5 # calculate md5 checksum per file
         Plugin = "python:module_path=/usr/lib/bareos/plugins:module_name=bareos-fd-file-interact"
       }
       File = "/etc"
       File = "/usr/lib/bareos/plugins"
     }
   }

This plugin bareos-fd-file-interact from https://github.com/bareos/bareos-contrib/tree/master/fd-plugins/options-plugin-sample has a method that is called before and after each file that goes into the backup, it can be used as a template for whatever plugin wants to interact with files before or after backup.

