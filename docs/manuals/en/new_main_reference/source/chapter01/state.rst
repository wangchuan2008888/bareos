.. ATTENTION do not edit this file manually.
   It was automatically converted from the corresponding .tex file

.. _StateChapter:

The Current State of Bareos
===========================

What is Implemented
-------------------

:index:`[TAG=Implementation->What is implemented] <pair: Implementation; What is implemented>`

-  Job Control

   -  Network backup/restore with centralized Director.

   -  Internal scheduler for automatic :ref:`Job <JobDef>` execution.

   -  Scheduling of multiple Jobs at the same time.

   -  You may run one Job at a time or multiple simultaneous Jobs (sometimes called multiplexing).

   -  Job sequencing using priorities.

   -  :ref:`Console <UADef>` interface to the Director allowing complete control. Some GUIs are also available.

-  Security

   -  Verification of files previously cataloged, permitting a Tripwire like capability (system break-in detection).

   -  CRAM-MD5 password authentication between each component (daemon).

   -  Configurable :ref:`TLS (SSL) communications encryption <CommEncryption>` between each component.

   -  Configurable :ref:`Data (on Volume) encryption <DataEncryption>` on a Client by Client basis.

   -  Computation of MD5 or SHA1 signatures of the file data if requested.

-  Restore Features

   -  Restore of one or more files selected interactively either for the current backup or a backup prior to a specified time and date.

   -  Listing and Restoration of files using stand-alone :command:`bls` and :command:`bextract` tool programs. Among other things, this permits extraction of files when Bareos and/or the catalog are not available. Note, the recommended way to restore files is using the restore command in the Console. These programs are designed for use as a last resort.

   -  Ability to restore the catalog database rapidly by using bootstrap files (previously saved).

   -  Ability to recreate the catalog database by scanning backup Volumes using the :command:`bscan` program.

-  SQL Catalog

   -  Catalog database facility for remembering Volumes, Pools, Jobs, and Files backed up.

   -  Support for PostgreSQL, MySQL and SQLite Catalog databases.

   -  User extensible queries to the PostgreSQL, MySQL and SQLite databases.

-  Advanced Volume and Pool Management

   -  Labeled Volumes, preventing accidental overwriting (at least by Bareos).

   -  Any number of Jobs and Clients can be backed up to a single Volume. That is, you can backup and restore Linux, Unix and Windows machines to the same Volume.

   -  Multi-volume saves. When a Volume is full, Bareos automatically requests the next Volume and continues the backup.

   -  :ref:`Pool and Volume <DirectorResourcePool>` library management providing Volume flexibility (e.g. monthly, weekly, daily Volume sets, Volume sets segregated by Client, ...).

   -  Machine independent Volume data format. Linux, Solaris, and Windows clients can all be backed up to the same Volume if desired.

   -  The Volume data format is upwards compatible so that old Volumes can always be read.

   -  A flexible :ref:`message <MessagesChapter>` handler including routing of messages from any daemon back to the Director and automatic email reporting.

   -  Data spooling to disk during backup with subsequent write to tape from the spooled disk files. This prevents tape "shoe shine" during Incremental/Differential backups.

-  Advanced Support for most Storage Devices

   -  Autochanger support using a simple shell interface that can interface to virtually any autoloader program. A script for :command:`mtx` is provided.

   -  Support for autochanger barcodes – automatic tape labeling from barcodes.

   -  Automatic support for multiple autochanger magazines either using barcodes or by reading the tapes.

   -  Support for multiple drive autochangers.

   -  Raw device backup/restore. Restore must be to the same device.

   -  All Volume blocks contain a data checksum.

   -  Migration support – move data from one Pool to another or one Volume to another.

-  Multi-Operating System Support

   -  Programmed to handle arbitrarily long filenames and messages.

   -  Compression on a file by file basis done by the Client program if requested before network transit.

   -  Saves and restores POSIX ACLs and Extended Attributes on most OSes if enabled.

   -  Access control lists for Consoles that permit restricting user access to only their data.

   -  Support for save/restore of files larger than 2GB.

   -  Support ANSI and IBM tape labels.

   -  Support for Unicode filenames (e.g. Chinese) on Win32 machines

   -  Consistent backup of open files on Win32 systems using Volume Shadow Copy (VSS).

   -  Support for path/filename lengths of up to 64K on Win32 machines (unlimited on Unix/Linux machines).

-  Miscellaneous

   -  Multi-threaded implementation.

Advantages Over Other Backup Programs
-------------------------------------

-  Bareos handles multi-volume backups.

-  A full comprehensive SQL standard database of all files backed up. This permits online viewing of files saved on any particular Volume.

-  Automatic pruning of the database (removal of old records) thus simplifying database administration.

-  The modular but integrated design makes Bareos very scalable.

-  Bareos has a built-in Job scheduler.

-  The Volume format is documented and there are simple C programs to read/write it.

-  Bareos uses well defined (IANA registered) TCP/IP ports – no rpcs, no shared memory.

-  Bareos installation and configuration is relatively simple compared to other comparable products.

-  Aside from several GUI administrative interfaces, Bareos has a comprehensive shell administrative interface, which allows the administrator to use tools such as ssh to administrate any part of Bareos from anywhere.

Current Implementation Restrictions
-----------------------------------

:index:`[TAG=Restrictions->Current Implementation] <pair: Restrictions; Current Implementation>`

-  

.. _MultipleCatalogs:

 It is possible to configure the Bareos Director to use multiple Catalogs. However, this is neither advised, nor supported. Multiple catalogs require more management because in general you must know what catalog contains what data, e.g. currently, all Pools are defined in each catalog.

-  Bareos can generally restore any backup made from one client to any other client. However, if the architecture is significantly different (i.e. 32 bit architecture to 64 bit or Win32 to Unix), some restrictions may apply (e.g. Solaris door files do not exist on other Unix/Linux machines; there are reports that Zlib compression written with 64 bit machines does not always read correctly on a 32 bit machine).

.. _section-DesignLimitations:

Design Limitations or Restrictions
----------------------------------

:index:`[TAG=Restrictions->Design Limitations] <pair: Restrictions; Design Limitations>` :index:`[TAG=Design->Limitations] <pair: Design; Limitations>`

-  Names (resource names, volume names, and such) defined in Bareos configuration files are limited to a fixed number of characters. Currently the limit is defined as 127 characters. Note, this does not apply to filenames, which may be arbitrarily long.

-  Command line input to some of the stand alone tools – e.g. :command:`btape`, :command:`bconsole` is restricted to several hundred characters maximum. Normally, this is not a restriction, except in the case of listing multiple Volume names for programs such as :command:`bscan`. To avoid this command line length restriction, please use a .bsr file to specify the Volume names.

-  Bareos configuration files for each of the components can be any length. However, the length of an individual line is limited to 500 characters after which it is truncated. If you need lines longer than 500 characters for directives such as ACLs where they permit a list of names are character strings simply specify multiple short lines repeating the directive on each line but with different list values.

Items to Note
-------------

:index:`[TAG=Items to Note] <single: Items to Note>`

-  Bareos’s Differential and Incremental *normal* backups are based on time stamps. Consequently, if you move files into an existing directory or move a whole directory into the backup fileset after a Full backup, those files will probably not be backed up by an Incremental save because they will have old dates. This problem is corrected by using :ref:`Accurate mode <accuratemode>` backups or by explicitly updating the date/time stamp on all moved files.

-  In non Accurate mode, files deleted after a Full save will be included in a restoration. This is typical for most similar backup programs. To avoid this, use :ref:`Accurate mode <accuratemode>` backup.

