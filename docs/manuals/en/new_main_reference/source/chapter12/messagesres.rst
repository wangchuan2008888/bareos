.. ATTENTION do not edit this file manually.
   It was automatically converted from the corresponding .tex file

.. _MessagesChapter:

Messages Resource
=================



.. _ResourceMessages:

 :index:`[TAG=Resource->Messages] <pair: Resource; Messages>` :index:`[TAG=Messages Resource] <single: Messages Resource>`

The Messages resource defines how messages are to be handled and destinations to which they should be sent.

Even though each daemon has a full message handler, within the |bareosFd| and the |bareosSd|, you will normally choose to send all the appropriate messages back to the |bareosDir|. This permits all the messages associated with a single Job to be combined in the Director and sent as a single email message to the user, or logged together in a single file.

Each message that Bareos generates (i.e. that each daemon generates) has an associated type such as INFO, WARNING, ERROR, FATAL, etc. Using the message resource, you can specify which message types you wish to see and where they should be sent. In addition, a message may be sent to multiple destinations. For example, you may want all error messages both logged as well as sent to you in an email. By defining multiple messages resources, you can have different message handling for each type of Job
(e.g. Full backups versus Incremental backups).

In general, messages are attached to a Job and are included in the Job report. There are some rare cases, where this is not possible, e.g. when no job is running, or if a communications error occurs between a daemon and the director. In those cases, the message may remain in the system, and should be flushed at the end of the next Job.

The records contained in a Messages resource consist of a destination specification followed by a list of message-types in the format: :index:`[TAG=Messages->destination] <pair: Messages; destination>`

destination = message-type1, message-type2, message-type3, ... 

or for those destinations that need and address specification (e.g. email):

destination = address = message-type1, message-type2, message-type3, ...
   | 
   | where

   destination
      is one of a predefined set of keywords that define where the message is to be sent (**Append**:sup:`Dir`:sub:`Messages`\ , **Console**:sup:`Dir`:sub:`Messages`\ , **File**:sup:`Dir`:sub:`Messages`\ , **Mail**:sup:`Dir`:sub:`Messages`\ , ...),

   address
      varies according to the destination keyword, but is typically an email address or a filename,

   :ref:`message-type <MessageTypes>`
      is one of a predefined set of keywords that define the type of message generated by Bareos: ERROR, WARNING, FATAL, ...

\defDirective{Dir}{Messages}{Append}{}{}{%
   Append the message to the filename given  in the {\bf address} field. If the
   file already exists, it will  be appended to. If the file does not exist, it
   will be created.
   }

\defDirective{Dir}{Messages}{Catalog}{}{}{%
   Send the message to the Catalog database. The message will be
   written to the table named {\bf Log} and a timestamp field will
   also be added. This permits Job Reports and other messages to
   be recorded in the Catalog so that they can be accessed by
   reporting software.  Bareos will prune the Log records associated
   with a Job when the Job records are pruned.  Otherwise, Bareos
   never uses these records internally, so this destination is only
   used for special purpose programs (e.g. frontend programs).
   }

\defDirective{Dir}{Messages}{Console}{}{}{%
   Send the message to the Bareos console. These messages are held
   until the console program  connects to the Director.
   }

\defDirective{Dir}{Messages}{Description}{}{}{%
   }

\defDirective{Dir}{Messages}{Director}{}{}{%
   Send the message to the Director whose name  is given in the {\bf address}
   field. Note, in the current  implementation, the Director Name is ignored, and
   the message  is sent to the Director that started the Job.
   }

\defDirective{Dir}{Messages}{File}{}{}{%
   Send the message to the filename given in  the {\bf address} field. If the
   file already exists, it will be  overwritten.
   }

\defDirective{Dir}{Messages}{Mail}{}{}{%
   Send the message to the email addresses that are given as a comma
   separated list in the {\bf address} field.  Mail messages are grouped
   together during a job and then sent as a single email message when the
   job terminates.  The advantage of this destination is that you are
   notified about every Job that runs.  However, if you backup mutliple
   machines every night, the number of email messages can be annoying.
   Some users use filter programs such as \command{procmail} to automatically
   file this email based on the Job termination code (see \linkResourceDirective{Dir}{Messages}{Mail Command}).
   }

\defDirective{Dir}{Messages}{Mail Command}{}{}{%
   \label{mailcommand}%
   In the absence of this resource,  Bareos will send all mail using the
   following command:

   {\bf /usr/lib/sendmail -F BAREOS <recipients>}

   %{\bf mail -s "Bareos Message" <recipients>}

   In many cases, depending on your machine, this command may not work.
   However, by using the \configdirective{Mail Command}, you can specify exactly how to
   send the mail.  During the processing of the {\bf command} part, normally
   specified as a quoted string, the following substitutions will be used:

   \begin{itemize}
   \item \%\% = \%
   \item \%c = Client's name
   \item \%d = Director's name
   \item \%e = Job Exit code (OK, Error, ...)
   \item \%h = Client address
   \item \%i = Job Id
   \item \%j = Unique Job name
   \item \%l = Job level
   \item \%n = Job name
   \item \%r = Recipients
   \item \%s = Since time
   \item \%t = Job type (e.g. Backup, ...)
   \item \%v = Read Volume name (Only on director side)
   \item \%V = Write Volume name (Only on director side)
   \end{itemize}

   Please note: any \configdirective{Mail Command} directive must be specified
   in the {\bf Messages} resource {\bf before} the desired
   \linkResourceDirective{Dir}{Messages}{Mail}, \linkResourceDirective{Dir}{Messages}{Mail On Success} 
   or \linkResourceDirective{Dir}{Messages}{Mail On Error}
   directive. In fact, each of those directives may be preceded by
   a different \configdirective{Mail Command}.

   A default installation will use the program {\bf bsmtp} as \configdirective{Mail Command}.
   The program \command{bsmtp} is provided by Bareos and unifies the usage of a mail client
   to a certain degree:

   \bconfigInput{config/MessagesMailCommand1.conf}

   The \command{bsmtp} program is provided as part of Bareos.  For
   additional details, please see the
   \nameref{bsmtp} section.
   Please test any \configdirective{Mail Command} that you use to ensure that your smtp gateway accepts  the
   addressing form that you use. Certain programs such as Exim can be very
   selective as to what forms are permitted particularly in the from part.
   }

\defDirective{Dir}{Messages}{Mail On Error}{}{}{%
   Send the message to the email addresses that are given as a comma
   separated list in the {\bf address} field if the Job terminates with an
   error condition.  \configdirective{Mail On Error} messages are grouped together during a job
   and then sent as a single email message when the job terminates.  This
   destination differs from the {\bf mail} destination in that if the Job
   terminates normally, the message is totally discarded (for this
   destination).  If the Job terminates in error, it is emailed.  By using
   other destinations such as {\bf append} you can ensure that even if the
   Job terminates normally, the output information is saved.
   }

\defDirective{Dir}{Messages}{Mail On Success}{}{}{%
   Send the message to the email addresses that are given as a comma
   separated list in the {\bf address} field if the Job terminates
   normally (no error condition).  \configdirective{Mail On Success} messages are grouped
   together during a job and then sent as a single email message when the
   job terminates.  This destination differs from the {\bf mail}
   destination in that if the Job terminates abnormally, the message is
   totally discarded (for this destination).  If the Job terminates
   normally, it is emailed.
   }

\defDirective{Dir}{Messages}{Name}{}{}{%
   The name of the Messages resource.  The name you specify here will be used to
   tie this Messages  resource to a Job and/or to the daemon.
   }

\defDirective{Dir}{Messages}{Operator}{}{}{%
   Send the message to the email addresses that are specified as a comma
   separated list in the {\bf address} field.  This is similar to {\bf
   mail} above, except that each message is sent as received.  Thus there
   is one email per message.  This is most useful for {\bf mount} messages
   (see below).
   }

\defDirective{Dir}{Messages}{Operator Command}{}{}{%
   This resource specification is  similar to the \linkResourceDirective{Dir}{Messages}{Mail Command} except that
   it is used for Operator  messages. The substitutions performed for the 
   \linkResourceDirective{Dir}{Messages}{Mail Command}
   are  also done for this command. Normally, you will set this
   command to the  same value as specified for the \linkResourceDirective{Dir}{Messages}{Mail Command}.
   The \configdirective{Operator Command} directive must appear in the {\bf Messages}
   resource before the \linkResourceDirective{Dir}{Messages}{Operator} directive.
   }

\defDirective{Dir}{Messages}{Stderr}{}{}{%
   Send the message to the standard error output (normally not used).
   }

\defDirective{Dir}{Messages}{Stdout}{}{}{%
   Send the message to the standard output (normally not used).
   }

\defDirective{Dir}{Messages}{Syslog}{}{}{%
   Send the message to the system log (syslog).

   Since \sinceVersion{dir}{Syslog Level}{14.4.0}
   the facility can be specified in the {\bf address} field 
   and the loglevel correspond to the Bareos \nameref{MessageTypes}.
   The defaults are \parameter{DAEMON} and \parameter{LOG_ERR}.

   Although the {\bf syslog} destination is not used in the default Bareos
   config files, in certain cases where Bareos encounters errors in trying
   to deliver a message, as a last resort, it will send it to the system
   {\bf syslog} to prevent loss of the message, so you might occassionally
   check the {\bf syslog} for Bareos output.
   }

.. _MessageTypes:

Message Types
-------------

For any destination, the message-type field is a comma separated list of the following types or classes of messages:

info
   | 
   | :index:`[TAG=Messages->type->info] <triple: Messages; type; info>` General information messages.

warning
   | 
   | :index:`[TAG=Messages->type->warning] <triple: Messages; type; warning>` Warning messages. Generally this is some unusual condition but not expected to be serious.

error
   | 
   | :index:`[TAG=Messages->type->error] <triple: Messages; type; error>` Non-fatal error messages. The job continues running. Any error message should be investigated as it means that something went wrong.

fatal
   | 
   | :index:`[TAG=Messages->type->fatal] <triple: Messages; type; fatal>` Fatal error messages. Fatal errors cause the job to terminate.

terminate
   | 
   | :index:`[TAG=Messages->type->terminate] <triple: Messages; type; terminate>` Message generated when the daemon shuts down.

notsaved
   | 
   | :index:`[TAG=Messages->type->notsaved] <triple: Messages; type; notsaved>` Files not saved because of some error. Usually because the file cannot be accessed (i.e. it does not exist or is not mounted).

skipped
   | 
   | :index:`[TAG=Messages->type->skipped] <triple: Messages; type; skipped>` Files that were skipped because of a user supplied option such as an incremental backup or a file that matches an exclusion pattern. This is not considered an error condition such as the files listed for the notsaved type because the configuration file explicitly requests these types of files to be skipped. For example, any unchanged file during an incremental backup, or any subdirectory if the no recursion option is specified.

mount
   | 
   | :index:`[TAG=Messages->type->mount] <triple: Messages; type; mount>` Volume mount or intervention requests from the Storage daemon. These requests require a specific operator intervention for the job to continue.

restored
   | 
   | :index:`[TAG=Messages->type->restored] <triple: Messages; type; restored>` The ls style listing generated for each file restored is sent to this message class.

all
   | 
   | :index:`[TAG=Messages->type->all] <triple: Messages; type; all>` All message types.

security
   | 
   | :index:`[TAG=Messages->type->security] <triple: Messages; type; security>` Security info/warning messages principally from unauthorized connection attempts.

alert
   | 
   | :index:`[TAG=Messages->type->alert] <triple: Messages; type; alert>` Alert messages. These are messages generated by tape alerts.

volmgmt
   | 
   | :index:`[TAG=Messages->type->volmgmt] <triple: Messages; type; volmgmt>` Volume management messages. Currently there are no volume management messages generated.

audit
   | 
   | :index:`[TAG=Messages->type->audit] <triple: Messages; type; audit>` :index:`[TAG=auditing] <single: auditing>` Audit messages. Interacting with the Bareos Director will be audited. Can be configured with in resource **Auditing**:sup:`Dir`:sub:`Director`\ .

The following is an example of a valid Messages resource definition, where all messages except files explicitly skipped or daemon termination messages are sent by email to backupoperator@example.com. In addition all mount messages are sent to the operator (i.e. emailed to backupoperator@example.com). Finally all messages other than explicitly skipped files and files saved are sent to the console:

.. code-block:: sh
   :caption: Message resource

   Messages {
     Name = Standard
     Mail = backupoperator@example.com = all, !skipped, !terminate
     Operator = backupoperator@example.com = mount
     Console = all, !skipped, !saved
   }

With the exception of the email address, an example Director’s Messages resource is as follows:

.. code-block:: sh
   :caption: Message resource

   Messages {
     Name = Standard
     Mail Command = "/usr/sbin/bsmtp -h mail.example.com  -f \"\(Bareos\) %r\" -s \"Bareos: %t %e of %c %l\" %r"
     Operator Command = "/usr/sbin/bsmtp -h mail.example.com -f \"\(Bareos\) %r\" -s \"Bareos: Intervention needed for %j\" %r"
     Mail On Error = backupoperator@example.com = all, !skipped, !terminate
     Append = "/var/log/bareos/bareos.log" = all, !skipped, !terminate
     Operator = backupoperator@example.com = mount
     Console = all, !skipped, !saved
   }
