
subdirs = ../../images/

MKDIR=mkdir -p
LATEX=latex
DVI2PDF=dvipdf
PDFLATEX=pdflatex
MAKEINDEX=makeindex
CONVERT=convert
BAREOS_DIR=/usr/sbin/bareos-dir
BAREOS_SD=/usr/sbin/bareos-sd
BAREOS_FD=/usr/sbin/bareos-fd
BCONSOLE=/usr/bin/bconsole
BAREOS_TRAY_MONITOR=/usr/bin/bareos-tray-monitor
GENERATED_RESOURCE_DESCRIPTIONS=../../scripts/generate-resoure-descriptions.py
GENERATED_PACKAGE_INFO=../../scripts/generate-bareos-package-info.py

INDEXES = bareos-manual-main-reference.console.ind \
	bareos-manual-main-reference.director.ind \
	bareos-manual-main-reference.general.ind \
	bareos-manual-main-reference.fd.ind \
	bareos-manual-main-reference.sd.ind \
	bareos-manual-main-reference.monitor.ind
HTINDEXES = bareos-manual-main-reference.console.htind \
	bareos-manual-main-reference.director.htind \
	bareos-manual-main-reference.general.htind \
	bareos-manual-main-reference.fd.htind \
	bareos-manual-main-reference.sd.htind \
	bareos-manual-main-reference.monitor.htind
GENERATED = autogenerated/bareos-dir-*.tex \
	autogenerated/bareos-sd-*.tex \
	autogenerated/bareos-fd-*.tex \
	autogenerated/bconsole-*.tex \
	autogenerated/bareos-tray-monitor-*.tex \
	autogenerated/bareos-packages-table-*.tex

LOG = bareos-manual-main-reference.log

all: pdf html

depend:
	@for I in ${subdirs}; \
		do (cd $$I; echo "==>Entering directory `pwd`"; $(MAKE) || exit 1); done
	ln -s ../../images/conv images || true

pdf: bareos-manual-main-reference.pdf

html: html/bareos-manual-main-reference.html

html/bareos-manual-main-reference.html: depend *.sty *.tex bareos-manual-main-reference.htlatex.cfg $(GENERATED) $(HTINDEXES) bareos-manual-main-reference.toc
	mkdir -p html/
	htlatex bareos-manual-main-reference "bareos-manual-main-reference.htlatex.cfg" "  -cunihtf -utf8" -d./html/
	mkdir -p html/images/
	mv html/*.png html/images/

%.idx:
	$(PDFLATEX) bareos-manual-main-reference.tex

%.ind: %.idx
	$(MAKEINDEX) $<

%.htidx:
	htlatex bareos-manual-main-reference "bareos-manual-main-reference.htlatex.cfg" "  -cunihtf -utf8" -d./html/

%.4dx: %.htidx
	name=`basename $< .htidx`; tex "\def\filename{{$$name}{htidx}{4dx}{htind}} \input idxmake.4ht"

%.htind: %.4dx
	name=`basename $< .4dx`; $(MAKEINDEX) -o $${name}.htind $<

bareos-manual-main-reference.toc: *.tex
	$(PDFLATEX) bareos-manual-main-reference.tex

bareos-manual-main-reference.dvi: depend *.sty *.tex $(GENERATED) $(INDEXES) bareos-manual-main-reference.toc
	$(LATEX) bareos-manual-main-reference.tex
	$(LATEX) bareos-manual-main-reference.tex

bareos-manual-main-reference.pdf: depend *.sty *.tex $(GENERATED) $(INDEXES) bareos-manual-main-reference.toc
	$(PDFLATEX) bareos-manual-main-reference.tex
	$(PDFLATEX) bareos-manual-main-reference.tex

autogenerated/bareos-dir-config-schema.json:
	$(MKDIR) autogenerated/
	# generate config-schema file.
	# Test if creation succeeded, if yes, redirect output to a json file.
	if $(BAREOS_DIR) -xs >/dev/null; then \
		$(BAREOS_DIR) -xs > autogenerated/bareos-dir-config-schema.json; \
	fi

autogenerated/bareos-sd-config-schema.json:
	$(MKDIR) autogenerated/
	# generate config-schema file.
	# Test if creation succeeded, if yes, redirect output to a json file.
	if $(BAREOS_SD) -xs >/dev/null; then \
		$(BAREOS_SD) -xs > autogenerated/bareos-sd-config-schema.json; \
	fi

autogenerated/bareos-fd-config-schema.json:
	$(MKDIR) autogenerated/
	# generate config-schema file.
	# Test if creation succeeded, if yes, redirect output to a json file.
	if $(BAREOS_FD) -xs >/dev/null; then \
		$(BAREOS_FD) -xs > autogenerated/bareos-fd-config-schema.json; \
	fi

autogenerated/bconsole-config-schema.json:
	$(MKDIR) autogenerated/
	# generate config-schema file.
	# Test if creation succeeded, if yes, redirect output to a json file.
	if $(BCONSOLE) -xs >/dev/null; then \
		$(BCONSOLE) -xs > autogenerated/bconsole-config-schema.json; \
	fi

autogenerated/bareos-tray-monitor-config-schema.json:
	$(MKDIR) autogenerated/
	# generate config-schema file.
	# Test if creation succeeded, if yes, redirect output to a json file.
	if $(BAREOS_TRAY_MONITOR) -xs >/dev/null; then \
		$(BAREOS_TRAY_MONITOR) -xs > autogenerated/bareos-tray-monitor-config-schema.json; \
	fi

autogenerated/bareos-dir-*.tex: autogenerated/bareos-dir-config-schema.json
	# generates all director-resource files
	$(GENERATED_RESOURCE_DESCRIPTIONS) autogenerated/bareos-dir-config-schema.json

autogenerated/bareos-sd-*.tex: autogenerated/bareos-sd-config-schema.json
	# generates all storage daemon resource files
	$(GENERATED_RESOURCE_DESCRIPTIONS) autogenerated/bareos-sd-config-schema.json

autogenerated/bareos-fd-*.tex: autogenerated/bareos-fd-config-schema.json
	# generates all file daemon resource files
	$(GENERATED_RESOURCE_DESCRIPTIONS) autogenerated/bareos-fd-config-schema.json

autogenerated/bconsole-*.tex: autogenerated/bconsole-config-schema.json
	# generates all bconsole resource files
	$(GENERATED_RESOURCE_DESCRIPTIONS) autogenerated/bconsole-config-schema.json

autogenerated/bareos-tray-monitor-*.tex: autogenerated/bareos-tray-monitor-config-schema.json
	# generates all tray-monitor resource files
	$(GENERATED_RESOURCE_DESCRIPTIONS) autogenerated/bareos-tray-monitor-config-schema.json

autogenerated/bareos-packages-table-*.tex:
	$(GENERATED_PACKAGE_INFO) -o autogenerated/ data/bareos-12.4-packages.json data/bareos-13.2-packages.json data/bareos-14.2-packages.json data/bareos-15.2-packages.json data/bareos-16.2-packages.json data/bareos-17.2-packages.json

check: bareos-manual-main-reference.pdf
	@# hyperlink: multiline: pdfTeX warning .* has been reference$d but does not exist
	@# defDirective multiline: Warning: defDirective{Dir}{Director}{PluginNames} has no matching resourceDirective and will be ignored.
	@# pdfTeX warning (dest): name{directiveDirJobMigration\040Time} has been referenced but does not exist, replaced by a fixed one
	@if ! grep "LaTeX Warning: Hyper reference .* undefined on input\|LaTeX Warning: There were undefined references.\|pdfTeX warning .* has been reference\|Warning: defDirective\|pdfTeX warning (dest): name" $(LOG); then echo "CHECK: OK"; true; else echo "CHECK: FAILED: undefined references"; false; fi

clean:
	if [ -e html/images/ ]; then rm -f html/images/* && rmdir html/images; fi
	rm -f *.4ct *.4dx *.4ix *.4tc *.aux *.dvi *.htidx *.htind *.idx *.log *.out *.pdf *.toc *.idv *.lg *.tmp *.xref html/* bareos-manual-main-reference.html bareos-manual-main-reference.css
	rm -f autogenerated/*
	@for I in ${subdirs}; \
		do (cd $$I; echo "==>Entering directory `pwd`"; $(MAKE) clean || exit 1); done
